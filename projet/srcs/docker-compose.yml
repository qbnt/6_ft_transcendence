version: '3.8'

services:
#-----------------------------------Frontend-----------------------------------#

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./requirements/Nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app_network
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    depends_on:
      - frontend

  frontend:
    image: frontend:1.0.0
    container_name: frontend
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/usr/src/app
    networks:
      - app_network
    ports:
      - "6001:6001"
      - "6002:6002"
    env_file:
      - .env
    # depends_on:
    #   - liveChat
    #   - userService
    #   - tournamentService

#-----------------------------------Backend------------------------------------#

  # liveChat:
  #   image: live_chat:1.0.0
  #   container_name: liveChat
  #   build:
  #     context: ./backend/live_chat
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend/live_chat:/usr/src/app
  #   networks:
  #     - app_network
  #   ports:
  #     - "6003:6003"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgresql

  # userService:
  #   image: user_service:1.0.0
  #   container_name: userService
  #   build:
  #     context: ./backend/user_service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend/user_service:/usr/src/app
  #   networks:
  #     - app_network
  #   ports:
  #     - "6004:6004"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgresql

  # tournamentService:
  #   image: tournament_service:1.0.0
  #   container_name: tournamentService
  #   build:
  #     context: ./backend/tournament_service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend/tournament_service:/usr/src/app
  #   networks:
  #     - app_network
  #   ports:
  #     - "6005:6005"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgresql

#-------------------------------Base de donnee---------------------------------#

  postgresql:
    image: postgres:13
    container_name: appDb
    env_file:
      - .env
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - app_network
    restart: on-failure

#----------------------------------ELK stack-----------------------------------#

  elasticsearch:
    image: elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - network.host=0.0.0.0
      - http.port=9200
      - xpack.security.enabled=false
    volumes:
      - ELKdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app_network

  logstash:
    image: logstash:8.13.4
    container_name: logstash
    depends_on:
      - elasticsearch
    environment:
      - xpack.monitoring.elasticsearch.hosts=http://elasticsearch:9200
      - path.data=/usr/share/logstash/data
      - config.reload.automatic=true
      - config.reload.interval=3s
    volumes:
      - ./requirements/ELK/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./requirements/ELK/test.log:/usr/share/logstash/test.log
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - app_network

  kibana:
    image: kibana:8.13.4
    container_name: kibana
    depends_on:
      - logstash
    networks:
      - app_network
    ports:
      - "5601:5601"
    environment:
      - server.name=kibana
      - server.host=0.0.0.0
      - elasticsearch.hosts=http://elasticsearch:9200
      - logstash.hosts=http://logstash:9600
      - xpack.monitoring.ui.container.elasticsearch.enabled=true
      - xpack.monitoring.collection.enabled=true
      - xpack.observability_ai_assistant.enabled=false


#----------------------------------Monitoring----------------------------------#

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   volumes:
  #     - ./requirements/Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - app_network
  #   restart: on-failure

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - app_network
  #   restart: on-failure


networks:
  app_network:
    driver: bridge

volumes:
  db:
    driver: local
  ELKdata:
    driver: local
  grafana-storage:
    driver: local

#----------------------------------Hashicorp----------------------------------#

version: '3.6'
  services:

  vault:
    image: vault:latest
    container_name: vault
    restart: on-failure:10
    ports:
      - "8201:8201"
    environment:
      VAULT_ADDR: 'https://0.0.0.0:8201'
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-volume:/data
    healthcheck:
      retries: 5
    command: ./srcs/HashiCorpVault/workflow-vault.sh
    networks:
      - sk_cloud