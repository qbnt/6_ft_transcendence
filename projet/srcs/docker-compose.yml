version: "3.8"

services:
#-----------------------------------Frontend-----------------------------------#

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./requirements/Nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app_network
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    # depends_on:
    #   - frontend

  # frontend:
  #   image: frontend:1.0.0
  #   container_name: frontend
  #   build:
  #     context: ./frontend/
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./frontend:/usr/src/app
  #   networks:
  #     - app_network
  #   ports:
  #     - "6001:6001"
  #     - "6002:6002"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - liveChat
  #     - userService
  #     - tournamentService

#-----------------------------------Backend------------------------------------#

  # liveChat:
  #   image: live_chat:1.0.0
  #   container_name: liveChat
  #   build:
  #     context: ./backend/live_chat
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend/live_chat:/usr/src/app
  #   networks:
  #     - app_network
  #   ports:
  #     - "6003:6003"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgresql

  # userService:
  #   image: user_service:1.0.0
  #   container_name: userService
  #   build:
  #     context: ./backend/user_service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend/user_service:/usr/src/app
  #   networks:
  #     - app_network
  #   ports:
  #     - "6004:6004"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgresql

  # tournamentService:
  #   image: tournament_service:1.0.0
  #   container_name: tournamentService
  #   build:
  #     context: ./backend/tournament_service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend/tournament_service:/usr/src/app
  #   networks:
  #     - app_network
  #   ports:
  #     - "6005:6005"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgresql

#-------------------------------Base de donnee---------------------------------#

  postgresql:
    image: postgres:13
    container_name: appDb
    env_file:
      - .env
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - app_network
    restart: on-failure

#----------------------------------ELK stack-----------------------------------#

  elasticsearch:
    image: elasticsearch:7.16.1
    container_name: es
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - app_network

  logstash:
    image: logstash:7.16.1
    container_name: log
    environment:
      discovery.seed_hosts: logstash
      LS_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - ./requirements/ELK/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash-nginx.config
      - ./requirements/ELK/nginx.log:/home/nginx.log
    ports:
      - "5001:5001/tcp"
      - "5001:5001/udp"
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - app_network
    command: logstash -f /usr/share/logstash/pipeline/logstash-nginx.config

  kibana:
    image: kibana:7.16.1
    container_name: kib
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app_network

#----------------------------------Monitoring----------------------------------#

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./requirements/prometheus:/etc/prometheus
      - prom_data:/prometheus
    networks:
      - app_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./requirements/grafana:/etc/grafana/provisioning/datasources
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  db:
    driver: local
  ELKdata:
    driver: local
  prom_data:
    driver: local
