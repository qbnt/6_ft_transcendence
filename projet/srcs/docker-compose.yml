version: "3.8"

services:
#-------------------------------------Web--------------------------------------#

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./requirements/Nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./requirements/Nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./requirements/Nginx/ssl/localhost.crt:/etc/nginx/ssl/localhost.crt
      - ./requirements/Nginx/ssl/localhost.key:/etc/nginx/ssl/localhost.key
    networks:
      - app_network
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    depends_on:
      - django
    restart: on-failure

  nginx_exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx_exporter
    command: -nginx.scrape-uri=http://nginx:80/stub_status
    ports:
      - "9113:9113"
    depends_on:
      - nginx
    networks:
      - app_network
    restart: on-failure

  django:
    container_name: django
    build: web/
    env_file:
      - .env
    environment:
      - DEBUG=1
      - ALLOWED_HOSTS=localhost
      - ELASTICSEARCH_HOST=elasticsearch
      - LOGSTASH_HOST=logstash
    volumes:
     - "./web/:/usr/src/app"
    networks:
      - app_network
    ports:
      - "8000:8000"
    depends_on:
      - postgresql
      - elasticsearch
      - logstash
    restart: on-failure

#-------------------------------Base de donnee---------------------------------#

  postgresql:
    image: postgres:13
    container_name: postgresql
    env_file:
      - .env
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - app_network
    ports:
      - "5432:5432"
    restart: on-failure

  postgres_exporter:
    image: wrouesnel/postgres_exporter
    container_name: postgres_exporter
    env_file:
      - .env
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      - postgresql
    ports:
      - "9187:9187"
    networks:
      - app_network
    restart: on-failure

#----------------------------------ELK stack-----------------------------------#

  elasticsearch:
    image: elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - network.host=0.0.0.0
      - http.port=9200
      - xpack.security.enabled=false
    volumes:
      - ELKdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app_network
    restart: on-failure

  logstash:
    image: logstash:8.13.4
    container_name: logstash
    depends_on:
      - elasticsearch
    environment:
      - xpack.monitoring.elasticsearch.hosts=http://elasticsearch:9200
      - path.data=/usr/share/logstash/data
      - config.reload.automatic=true
      - config.reload.interval=3s
    volumes:
      - ./requirements/ELK/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./requirements/ELK/pipeline/patterns:/etc/logstash/patterns
    ports:
      - "5044:5044"
      - "5045:5045"
      - "9600:9600"
    networks:
      - app_network
    restart: on-failure

  kibana:
    image: kibana:8.13.4
    container_name: kibana
    depends_on:
      - logstash
    networks:
      - app_network
    ports:
      - "5601:5601"
    environment:
      - server.name=kibana
      - server.host=0.0.0.0
      - elasticsearch.hosts=http://elasticsearch:9200
      - logstash.hosts=http://logstash:9600
      - xpack.monitoring.ui.container.elasticsearch.enabled=true
      - xpack.monitoring.collection.enabled=true
    restart: on-failure

#----------------------------------Monitoring----------------------------------#

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./requirements/prometheus:/etc/prometheus/
    ports:
      - "9090:9090"
    networks:
      - app_network
    restart: on-failure

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - app_network
    restart: on-failure

#----------------------------------HashiCorpV----------------------------------#

  vault:
    image: vault:1.13.3
    container_name: vault
    restart: on-failure:10
    ports:
      - "8201:8201"
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"
    cap_add:
      - IPC_LOCK
    volumes:
      - HashiCorp:/data
      - ./requirements/HashiCorpVault/requirements:/requirements
    healthcheck:
      retries: 5
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  db:
   driver: local
  ELKdata:
   driver: local
  prom_data:
   driver: local
  HashiCorp:
   driver: local
