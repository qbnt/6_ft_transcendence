version: "3.8"

services:
#-----------------------------------Frontend-----------------------------------#

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./requirements/Nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app_network
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    # depends_on:
    #   - frontend

  # frontend:
  #   image: frontend:1.0.0
  #   container_name: frontend
  #   build:
  #     context: ./frontend/
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./frontend:/usr/src/app
  #   networks:
  #     - app_network
  #   ports:
  #     - "6001:6001"
  #     - "6002:6002"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - liveChat
  #     - userService
  #     - tournamentService

#-----------------------------------Backend------------------------------------#

  # liveChat:
  #   image: live_chat:1.0.0
  #   container_name: liveChat
  #   build:
  #     context: ./backend/live_chat
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend/live_chat:/usr/src/app
  #   networks:
  #     - app_network
  #   ports:
  #     - "6003:6003"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgresql

  # userService:
  #   image: user_service:1.0.0
  #   container_name: userService
  #   build:
  #     context: ./backend/user_service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend/user_service:/usr/src/app
  #   networks:
  #     - app_network
  #   ports:
  #     - "6004:6004"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgresql

  # tournamentService:
  #   image: tournament_service:1.0.0
  #   container_name: tournamentService
  #   build:
  #     context: ./backend/tournament_service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend/tournament_service:/usr/src/app
  #   networks:
  #     - app_network
  #   ports:
  #     - "6005:6005"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgresql

#-------------------------------Base de donnee---------------------------------#

  postgresql:
    image: postgres:13
    container_name: appDb
    env_file:
      - .env
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - app_network
    restart: on-failure

#----------------------------------ELK stack-----------------------------------#

  elasticsearch:
    image: elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - network.host=0.0.0.0
      - http.port=9200
      - xpack.security.enabled=false
    volumes:
      - ELKdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app_network

  logstash:
    image: logstash:8.13.4
    container_name: logstash
    depends_on:
      - elasticsearch
    environment:
      - xpack.monitoring.elasticsearch.hosts=http://elasticsearch:9200
      - path.data=/usr/share/logstash/data
      - config.reload.automatic=true
      - config.reload.interval=3s
    volumes:
      - ./requirements/ELK/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./requirements/ELK/test.log:/usr/share/logstash/test.log
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - app_network

  kibana:
    image: kibana:8.13.4
    container_name: kibana
    depends_on:
      - logstash
    networks:
      - app_network
    ports:
      - "5601:5601"
    environment:
      - server.name=kibana
      - server.host=0.0.0.0
      - elasticsearch.hosts=http://elasticsearch:9200
      - logstash.hosts=http://logstash:9600
      - xpack.monitoring.ui.container.elasticsearch.enabled=true
      - xpack.observability_ai_assistant.enabled=false
      - xpack.monitoring.collection.enabled=true

#----------------------------------Monitoring----------------------------------#

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./requirements/prometheus:/etc/prometheus
      - prom_data:/prometheus
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./requirements/grafana:/etc/grafana/provisioning/datasources

networks:
  app_network:
    driver: bridge

volumes:
  db:
    driver: local
  ELKdata:
    driver: local
  prom_data:
    driver: local
  HashiCorp:
    driver: local

#----------------------------------Hashicorp----------------------------------#

  HashiCorpVault:
    version: '3.6'
    services:
      vault:
        image: vault:1.13.3
        container_name: vault
        restart: on-failure:10
        ports:
          - "8201:8201"
        environment:
          VAULT_ADDR: 'https://0.0.0.0:8201'
          VAULT_LOCAL_CONFIG: '{"listener": [{"tcp":{"address": "0.0.0.0:8201","tls_disable":"0", \
                              "tls_cert_file":"/HashiCorpVault/requirements/certificate.pem", \
                              "tls_key_file":"/HashiCorpVault/requirements/key.pem"}}], \
                              "default_lease_ttl": "168h", "max_lease_ttl": "720h"}, "ui": true}'
          VAULT_DEV_ROOT_TOKEN_ID: '3f6104e8-af38-48fd-b2d0-475797cc04a5'
          VAULT_TOKEN: 'hvs.07jE2OHP3ysgy1Y9pdkwKT16'
        cap_add:
          - IPC_LOCK
        volumes:
          - ./HashiCorpVault:/data
        healthcheck:
          retries: 5
        command: server -dev -dev-root-token-id="3f6104e8-af38-48fd-b2d0-475797cc04a5"
        networks:
          - sk_cloud